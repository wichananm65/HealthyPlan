import 'package:flutter/material.dart';
import 'package:healthy_plan/drawer.dart';
import 'package:healthy_plan/services/menu_service.dart';

class TodaySummaryPage extends StatefulWidget {
  final List<MenuModel> breakfastFoods;
  final List<MenuModel> lunchFoods;
  final List<MenuModel> dinnerFoods;

  const TodaySummaryPage({
    super.key,
    required this.breakfastFoods,
    required this.lunchFoods,
    required this.dinnerFoods,
  });

  @override
  State<TodaySummaryPage> createState() => _TodaySummaryPageState();
}

class _TodaySummaryPageState extends State<TodaySummaryPage> {
  final double recommendedCaloriesLimit = 2000.0;
  final double recommendedSugarLimit =
      50.0; // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50g ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô

  double get totalCalories {
    double total = 0.0;
    total += widget.breakfastFoods.fold(
      0.0,
      (sum, food) => sum + food.calories,
    );
    total += widget.lunchFoods.fold(0.0, (sum, food) => sum + food.calories);
    total += widget.dinnerFoods.fold(0.0, (sum, food) => sum + food.calories);
    return total;
  }

  double get totalSugar {
    double total = 0.0;
    total += widget.breakfastFoods.fold(
      0.0,
      (sum, food) => sum + food.sugarContent,
    );
    total += widget.lunchFoods.fold(
      0.0,
      (sum, food) => sum + food.sugarContent,
    );
    total += widget.dinnerFoods.fold(
      0.0,
      (sum, food) => sum + food.sugarContent,
    );
    return total;
  }

  double getMealCalories(List<MenuModel> foods) {
    return foods.fold(0.0, (sum, food) => sum + food.calories);
  }

  double getMealSugar(List<MenuModel> foods) {
    return foods.fold(0.0, (sum, food) => sum + food.sugarContent);
  }

  Color _getCaloriesStatusColor(double amount) {
    if (amount <= recommendedCaloriesLimit * 0.7) {
      return Colors.green;
    } else if (amount <= recommendedCaloriesLimit) {
      return Colors.orange;
    } else {
      return Colors.red;
    }
  }

  Color _getSugarStatusColor(double amount) {
    if (amount <= recommendedSugarLimit * 0.6) {
      return Colors.green;
    } else if (amount <= recommendedSugarLimit) {
      return Colors.orange;
    } else {
      return Colors.red;
    }
  }

  String _getCaloriesStatusText(double amount) {
    if (amount <= recommendedCaloriesLimit * 0.7) {
      return '‡∏î‡∏µ';
    } else if (amount <= recommendedCaloriesLimit) {
      return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
    } else {
      return '‡πÄ‡∏Å‡∏¥‡∏ô';
    }
  }

  String _getSugarStatusText(double amount) {
    if (amount <= recommendedSugarLimit * 0.6) {
      return '‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢';
    } else if (amount <= recommendedSugarLimit) {
      return '‡∏£‡∏∞‡∏ß‡∏±‡∏á';
    } else {
      return '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢';
    }
  }

  bool get hasAnyFood {
    return widget.breakfastFoods.isNotEmpty ||
        widget.lunchFoods.isNotEmpty ||
        widget.dinnerFoods.isNotEmpty;
  }

  Widget _buildMealCard(String mealName, String emoji, List<MenuModel> foods) {
    double mealCalories = getMealCalories(foods);
    double mealSugar = getMealSugar(foods);

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.green.shade200),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Text(emoji, style: const TextStyle(fontSize: 24)),
              const SizedBox(width: 8),
              Text(
                mealName,
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const Spacer(),
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.orange.shade50,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      '${mealCalories.toStringAsFixed(0)} kcal',
                      style: TextStyle(
                        color: Colors.orange.shade700,
                        fontWeight: FontWeight.w600,
                        fontSize: 12,
                      ),
                    ),
                  ),
                  const SizedBox(height: 4),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.blue.shade50,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      '${mealSugar.toStringAsFixed(1)} g',
                      style: TextStyle(
                        color: Colors.blue.shade700,
                        fontWeight: FontWeight.w600,
                        fontSize: 12,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
          const SizedBox(height: 12),
          if (foods.isNotEmpty)
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children:
                  foods.map((food) {
                    return Padding(
                      padding: const EdgeInsets.only(bottom: 4),
                      child: Row(
                        children: [
                          const Text(
                            '‚Ä¢ ',
                            style: TextStyle(color: Colors.grey),
                          ),
                          Expanded(
                            child: Text(
                              food.foodName,
                              style: const TextStyle(fontSize: 14),
                            ),
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: [
                              Text(
                                '${food.calories} kcal',
                                style: TextStyle(
                                  fontSize: 11,
                                  color: Colors.grey.shade600,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              Text(
                                '${food.sugarContent.toStringAsFixed(1)} g',
                                style: TextStyle(
                                  fontSize: 11,
                                  color: Colors.blue.shade600,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    );
                  }).toList(),
            )
          else
            const Text(
              '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
              style: TextStyle(color: Colors.grey, fontStyle: FontStyle.italic),
            ),
        ],
      ),
    );
  }

  String getDailyRecommendation() {
    String caloriesStatus = _getCaloriesStatusText(totalCalories);
    String sugarStatus = _getSugarStatusText(totalSugar);

    if (sugarStatus == '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢') {
      return 'üö® ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏°‡∏≤‡∏Å - ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô!\n'
          '‚Ä¢ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏´‡∏ß‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n'
          '‚Ä¢ ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏°‡∏≤‡∏Å‡πÜ ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ\n'
          '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ö‡πà‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô';
    } else if (sugarStatus == '‡∏£‡∏∞‡∏ß‡∏±‡∏á') {
      return '‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î\n'
          '‚Ä¢ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ß‡∏≤‡∏ô‡πÉ‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î\n'
          '‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ï‡πà‡∏≥\n'
          '‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ';
    } else if (caloriesStatus == '‡πÄ‡∏Å‡∏¥‡∏ô') {
      return '‚ö†Ô∏è ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏¢‡∏±‡∏á‡∏î‡∏µ\n'
          '‚Ä¢ ‡∏•‡∏î‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏°\n'
          '‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏±‡∏Å‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß\n'
          '‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô';
    } else {
      return '‚úÖ ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏ó‡∏±‡πâ‡∏á‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n'
          '‚Ä¢ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ\n'
          '‚Ä¢ ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n'
          '‚Ä¢ ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.green,
        title: const Text('‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ú‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'),
      ),
      drawer: MyDrawer(),
      body:
          !hasAnyFood
              ? const Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.restaurant_menu, size: 80, color: Colors.grey),
                    SizedBox(height: 16),
                    Text(
                      '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
                      style: TextStyle(fontSize: 18, color: Colors.grey),
                    ),
                    SizedBox(height: 8),
                    Text(
                      '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                      style: TextStyle(fontSize: 14, color: Colors.grey),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              )
              : SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Summary Cards Row
                    Row(
                      children: [
                        // Calories Summary
                        Expanded(
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              gradient: LinearGradient(
                                colors: [
                                  Colors.orange.shade100,
                                  Colors.orange.shade50,
                                ],
                                begin: Alignment.topLeft,
                                end: Alignment.bottomRight,
                              ),
                              borderRadius: BorderRadius.circular(16),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.grey.withOpacity(0.3),
                                  spreadRadius: 2,
                                  blurRadius: 5,
                                  offset: const Offset(0, 3),
                                ),
                              ],
                            ),
                            child: Column(
                              children: [
                                const Icon(
                                  Icons.local_fire_department,
                                  size: 30,
                                  color: Colors.orange,
                                ),
                                const SizedBox(height: 4),
                                const Text(
                                  '‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: Colors.grey,
                                  ),
                                ),
                                Text(
                                  '${totalCalories.toStringAsFixed(0)} kcal',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    color: _getCaloriesStatusColor(
                                      totalCalories,
                                    ),
                                  ),
                                ),
                                const SizedBox(height: 4),
                                Text(
                                  '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${_getCaloriesStatusText(totalCalories)}',
                                  style: TextStyle(
                                    fontSize: 10,
                                    color: _getCaloriesStatusColor(
                                      totalCalories,
                                    ),
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                                const SizedBox(height: 8),
                                LinearProgressIndicator(
                                  value: (totalCalories /
                                          recommendedCaloriesLimit)
                                      .clamp(0.0, 1.0),
                                  backgroundColor: Colors.grey.shade200,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    _getCaloriesStatusColor(totalCalories),
                                  ),
                                  minHeight: 6,
                                ),
                              ],
                            ),
                          ),
                        ),

                        const SizedBox(width: 12),

                        // Sugar Summary
                        Expanded(
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              gradient: LinearGradient(
                                colors: [
                                  Colors.blue.shade100,
                                  Colors.blue.shade50,
                                ],
                                begin: Alignment.topLeft,
                                end: Alignment.bottomRight,
                              ),
                              borderRadius: BorderRadius.circular(16),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.grey.withOpacity(0.3),
                                  spreadRadius: 2,
                                  blurRadius: 5,
                                  offset: const Offset(0, 3),
                                ),
                              ],
                            ),
                            child: Column(
                              children: [
                                const Icon(
                                  Icons.water_drop,
                                  size: 30,
                                  color: Colors.blue,
                                ),
                                const SizedBox(height: 4),
                                const Text(
                                  '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏£‡∏ß‡∏°',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: Colors.grey,
                                  ),
                                ),
                                Text(
                                  '${totalSugar.toStringAsFixed(1)} g',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    color: _getSugarStatusColor(totalSugar),
                                  ),
                                ),
                                const SizedBox(height: 4),
                                Text(
                                  '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${_getSugarStatusText(totalSugar)}',
                                  style: TextStyle(
                                    fontSize: 10,
                                    color: _getSugarStatusColor(totalSugar),
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                                const SizedBox(height: 8),
                                LinearProgressIndicator(
                                  value: (totalSugar / recommendedSugarLimit)
                                      .clamp(0.0, 1.0),
                                  backgroundColor: Colors.grey.shade200,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    _getSugarStatusColor(totalSugar),
                                  ),
                                  minHeight: 6,
                                ),
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),

                    const SizedBox(height: 24),
                    const Text(
                      '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≤‡∏°‡∏°‡∏∑‡πâ‡∏≠',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF1AA916),
                      ),
                    ),
                    const SizedBox(height: 16),

                    _buildMealCard('‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤', 'üç≥', widget.breakfastFoods),
                    _buildMealCard('‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô', 'üçõ', widget.lunchFoods),
                    _buildMealCard('‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô', 'üç≤', widget.dinnerFoods),

                    const SizedBox(height: 24),

                    // Recommendation / Tips
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.green.shade50,
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.green.shade200),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Icon(
                                Icons.health_and_safety,
                                color: Colors.green.shade700,
                              ),
                              const SizedBox(width: 8),
                              Text(
                                '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.green.shade700,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 12),
                          Text(
                            getDailyRecommendation(),
                            style: const TextStyle(fontSize: 14, height: 1.5),
                          ),
                        ],
                      ),
                    ),

                    const SizedBox(height: 16),

                    // Additional info for diabetics
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.blue.shade50,
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.blue.shade200),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Icon(Icons.info, color: Colors.blue.shade700),
                              const SizedBox(width: 8),
                              Text(
                                '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.blue.shade700,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 12),
                          Text(
                            '‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô: ${recommendedCaloriesLimit.toStringAsFixed(0)} kcal\n'
                            '‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô: ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${recommendedSugarLimit.toStringAsFixed(0)} g\n'
                            '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£\n'
                            '‚Ä¢ ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô',
                            style: const TextStyle(fontSize: 14, height: 1.5),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
    );
  }
}
